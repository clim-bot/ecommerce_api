---
openapi: 3.0.1
info:
  title: eCommerce API V1
  version: v1
  description: API documentation for eCommerce platform.
paths:
  "/cart":
    get:
      summary: get user cart
      tags:
      - Carts
      security:
      - bearerAuth: []
      responses:
        '200':
          description: successful
        '401':
          description: unauthorized
  "/cart/add_item/{product_id}":
    parameters:
    - name: product_id
      in: path
      description: ID of the product
      required: true
      schema:
        type: string
    post:
      summary: add item to cart
      tags:
      - Carts
      security:
      - bearerAuth: []
      responses:
        '200':
          description: item added
        '404':
          description: product not found
  "/cart/remove_item/{product_id}":
    parameters:
    - name: product_id
      in: path
      description: ID of the product to remove
      required: true
      schema:
        type: string
    delete:
      summary: remove item from cart
      tags:
      - Carts
      security:
      - bearerAuth: []
      responses:
        '204':
          description: item removed
        '404':
          description: product not found in cart
  "/orders":
    post:
      summary: create order
      tags:
      - Orders
      responses:
        '201':
          description: created
  "/orders/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
    get:
      summary: show order
      tags:
      - Orders
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Order"
  "/products":
    get:
      summary: list products
      tags:
      - Products
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Product"
    post:
      summary: create product
      tags:
      - Products
      parameters: []
      responses:
        '201':
          description: created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                inventory:
                  type: integer
              required:
              - name
              - price
              - inventory
  "/products/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
    get:
      summary: show product
      tags:
      - Products
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Product"
    put:
      summary: update product
      tags:
      - Products
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                inventory:
                  type: integer
              required:
              - name
              - price
              - inventory
    delete:
      summary: delete product
      tags:
      - Products
      responses:
        '204':
          description: successful
  "/register":
    post:
      summary: register user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
              - name
              - email
              - password
  "/login":
    post:
      summary: login user
      tags:
      - Users
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Laptop
        description:
          type: string
          example: A high-end gaming laptop
        price:
          type: number
          example: 1200.0
        inventory:
          type: integer
          example: 5
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@example.com
        password:
          type: string
          example: password
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Order:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        total_amount:
          type: number
          example: 1500.0
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    Cart:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        cart_items:
          type: array
          items:
            type: object
            properties:
              product_id:
                type: integer
                example: 1
              quantity:
                type: integer
                example: 2
security:
- bearerAuth: []
